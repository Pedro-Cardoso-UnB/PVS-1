(inf_prime_topology
 (union_open_is_open 0
  (union_open_is_open-1 nil 3925820628
   ("" (skeep)
    (("" (expand "open_N_Z?")
      (("" (typepred "S")
        (("" (typepred "o")
          (("" (expand "open_N_Z?")
            (("" (prop)
              (("1" (replaces -1)
                (("1" (replaces -1)
                  (("1" (rewrite "union_empty[int]") nil nil)) nil))
                nil)
               ("2" (replace -2 1)
                (("2" (replace -2 2)
                  (("2" (hide 1)
                    (("2" (skeep)
                      (("2" (case "union(emptyset, S) = S")
                        (("1" (replaces -1)
                          (("1" (inst -1 "a")
                            (("1" (typepred "a")
                              (("1" (grind) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (rewrite "union_commutative[int]")
                          (("2" (rewrite "union_empty[int]") nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 1)
                (("3" (replace -1 1)
                  (("3" (case "union(o, emptyset) = o")
                    (("1" (replaces -1)
                      (("1" (skeep)
                        (("1" (inst -2 "a")
                          (("1" (typepred "a") (("1" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (rewrite "union_empty[int]") nil nil))
                    nil))
                  nil))
                nil)
               ("4" (postpone) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (int_is_open 0
  (int_is_open-1 nil 3926511909
   ("" (expand "open_N_Z?")
    (("" (prop)
      (("" (hide 1)
        (("" (skeep)
          (("" (inst 1 "1")
            (("" (expand "N") (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((N const-decl "set[int]" inf_prime_topology nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (fullset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (open_N_Z? const-decl "bool" inf_prime_topology nil))
   shostak))
 (IMP_topology_TCC1 0
  (IMP_topology_TCC1-1 nil 3925820628 ("" (subtype-tcc) nil nil) nil
   nil
   (IMP_topology subtype
    "extend[setof[int], (inf_prime_topology.open_N_Z?), booleans.bool, booleans.FALSE].extend(sets[(inf_prime_topology.open_N_Z?)].fullset)"
    "topology[int]")))
 (Nab_open 0
  (Nab_open-1 nil 3926430174
   ("" (skeep)
    (("" (expand "open?")
      (("" (assert)
        (("" (expand "extend")
          (("" (prop)
            (("1" (grind) nil nil)
             ("2" (assert)
              (("2" (expand "open_N_Z?")
                (("2" (prop)
                  (("2" (hide 1)
                    (("2" (skeep)
                      (("2" (inst 1 "b")
                        (("2" (expand "subset?")
                          (("2" (assert)
                            (("2" (skeep)
                              (("2"
                                (expand "N")
                                (("2"
                                  (skeep)
                                  (("2"
                                    (replaces -1)
                                    (("2"
                                      (typepred "a_1")
                                      (("2"
                                        (expand "N")
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (replaces -1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst 1 "n!1 + n")
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((open? const-decl "bool" topology topology)
    (extend const-decl "R" extend nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (N const-decl "set[int]" inf_prime_topology nil)
    (subset? const-decl "bool" sets nil)
    (open_N_Z? const-decl "bool" inf_prime_topology nil)
    (fullset const-decl "set" sets nil)
    (int_times_int_is_int application-judgement "int" integers nil) nil
    nil (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (member const-decl "bool" sets nil))
   shostak))
 (N_prime_TCC1 0
  (N_prime_TCC1-1 nil 3925820628 ("" (subtype-tcc) nil nil) nil nil
   (N_prime subtype "inf_prime_topology.p" "posint")))
 (one_prime_decomposition_ind 0
  (one_prime_decomposition_ind-1 nil 3926879151
   ("" (measure-induct+ "n" "n")
    (("" (case "x!1 = 2")
      (("1" (hide -2)
        (("1" (hide 1)
          (("1" (replaces -1)
            (("1" (case "prime?(2)")
              (("1" (inst 1 "2")
                (("1" (expand "divides")
                  (("1" (inst 1 "1") (("1" (grind) nil nil)) nil))
                  nil))
                nil)
               ("2" (lemma "prime_2") (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert)
        (("2" (case "EXISTS (n, m: nat): x!1 = m*n")
          (("1" (skeep)
            (("1" (replaces -1)
              (("1" (lemma "divides_transitive")
                (("1" (case "EXISTS (p: (prime?)): divides(p, m)")
                  (("1" (skeep)
                    (("1" (inst -2 "m*n" "n" "p")
                      (("1" (inst 3 "p")
                        (("1" (inst -3 "n")
                          (("1" (hide 1 2)
                            (("1" (prop)
                              (("1"
                                (expand "divides")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (skeep -2)
                                    (("1"
                                      (replaces -2)
                                      (("1"
                                        (inst 2 "x*n")
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "divides")
                                (("2"
                                  (skeep)
                                  (("2"
                                    (replaces -2)
                                    (("2"
                                      (inst 2 "x*n")
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (expand "divides")
                                (("3"
                                  (skeep)
                                  (("3"
                                    (replaces -1)
                                    (("3"
                                      (inst 3 "x*n")
                                      (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (expand "divides")
                                (("4"
                                  (skeep -2)
                                  (("4"
                                    (replaces -2)
                                    (("4"
                                      (inst 2 "x*n")
                                      (("4" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("5"
                                (expand "divides")
                                (("5"
                                  (skeep -2)
                                  (("5"
                                    (replaces -2)
                                    (("5"
                                      (inst 2 "x*n")
                                      (("5" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("6"
                                (expand "divides")
                                (("6"
                                  (skeep)
                                  (("6"
                                    (replaces -1)
                                    (("6"
                                      (inst 3 "x*n")
                                      (("6" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2 3)
                    (("2" (hide -1) (("2" (postpone) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (postpone) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (prime_set_is_infinite 0
  (prime_set_is_infinite-1 nil 3926876862
   ("" (lemma "fin_prime_closed_Np")
    (("" (prop)
      (("" (lemma "Union_Nprime")
        ((""
          (case "Union(N_prime) = complement[int]({x: int | x = 1 OR x = -1})")
          (("1" (replaces -1)
            (("1" (expand "closed?")
              (("1" (assert)
                (("1" (expand "extend")
                  (("1" (prop)
                    (("1" (rewrite "complement_complement")
                      (("1" (lemma "open_is_infinite")
                        (("1" (inst -1 "{x: int | x = 1 OR x = -1}")
                          (("1" (prop)
                            (("1" (lemma "set_one_mone_is_finite")
                              (("1" (propax) nil nil)) nil)
                             ("2" (expand "nonempty?")
                              (("2"
                                (expand "empty?")
                                (("2"
                                  (assert)
                                  (("2" (inst -1 "1") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (expand "open?")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "extend")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (complement const-decl "set" sets nil)
    (N_prime const-decl "setofsets[int]" inf_prime_topology nil)
    (Union const-decl "set" sets nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (closed? const-decl "bool" topology topology)
    (extend const-decl "R" extend nil)
    (complement_complement formula-decl nil sets_lemmas nil)
    (open_N_Z? const-decl "bool" inf_prime_topology nil)
    (FALSE const-decl "bool" booleans nil)
    (fullset const-decl "set" sets nil)
    (open? const-decl "bool" topology topology)
    (nonempty? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (set_one_mone_is_finite formula-decl nil inf_prime_topology nil)
    (open_is_infinite formula-decl nil inf_prime_topology nil)
    (member const-decl "bool" sets nil)
    (TRUE const-decl "bool" booleans nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (Union_Nprime formula-decl nil inf_prime_topology nil)
    (fin_prime_closed_Np formula-decl nil inf_prime_topology nil))
   shostak)))

