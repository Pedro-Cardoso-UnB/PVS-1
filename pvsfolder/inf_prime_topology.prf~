(inf_prime_topology
 (union_open_is_open 0
  (union_open_is_open-1 nil 3925820628
   ("" (skeep)
    (("" (expand "open_N_Z?")
      (("" (typepred "S")
        (("" (typepred "o")
          (("" (expand "open_N_Z?")
            (("" (prop)
              (("1" (replaces -1)
                (("1" (replaces -1)
                  (("1" (rewrite "union_empty[int]") nil nil)) nil))
                nil)
               ("2" (replace -2 1)
                (("2" (replace -2 2)
                  (("2" (hide 1)
                    (("2" (skeep)
                      (("2" (case "union(emptyset, S) = S")
                        (("1" (replaces -1)
                          (("1" (inst -1 "a")
                            (("1" (typepred "a")
                              (("1" (grind) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (rewrite "union_commutative[int]")
                          (("2" (rewrite "union_empty[int]") nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 1)
                (("3" (replace -1 1)
                  (("3" (case "union(o, emptyset) = o")
                    (("1" (replaces -1)
                      (("1" (skeep)
                        (("1" (inst -2 "a")
                          (("1" (typepred "a") (("1" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (rewrite "union_empty[int]") nil nil))
                    nil))
                  nil))
                nil)
               ("4" (postpone) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (int_is_open 0
  (int_is_open-1 nil 3926511909
   ("" (expand "open_N_Z?")
    (("" (prop)
      (("" (hide 1)
        (("" (skeep)
          (("" (inst 1 "1")
            (("" (expand "N") (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((N const-decl "set[int]" inf_prime_topology nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (fullset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (open_N_Z? const-decl "bool" inf_prime_topology nil))
   shostak))
 (IMP_topology_TCC1 0
  (IMP_topology_TCC1-1 nil 3925820628 ("" (subtype-tcc) nil nil) nil
   nil
   (IMP_topology subtype
    "extend[setof[int], (inf_prime_topology.open_N_Z?), booleans.bool, booleans.FALSE].extend(sets[(inf_prime_topology.open_N_Z?)].fullset)"
    "topology[int]")))
 (Nab_open 0
  (Nab_open-1 nil 3926430174
   ("" (skeep)
    (("" (expand "open?")
      (("" (assert)
        (("" (expand "extend")
          (("" (prop)
            (("1" (grind) nil nil)
             ("2" (assert)
              (("2" (expand "open_N_Z?")
                (("2" (prop)
                  (("2" (hide 1)
                    (("2" (skeep)
                      (("2" (inst 1 "b")
                        (("2" (expand "subset?")
                          (("2" (assert)
                            (("2" (skeep)
                              (("2"
                                (expand "N")
                                (("2"
                                  (skeep)
                                  (("2"
                                    (replaces -1)
                                    (("2"
                                      (typepred "a_1")
                                      (("2"
                                        (expand "N")
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (replaces -1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst 1 "n!1 + n")
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((open? const-decl "bool" topology topology)
    (extend const-decl "R" extend nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (N const-decl "set[int]" inf_prime_topology nil)
    (subset? const-decl "bool" sets nil)
    (open_N_Z? const-decl "bool" inf_prime_topology nil)
    (fullset const-decl "set" sets nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (emptyset_is_compact name-judgement "compact
    [int,
     extend[setof[int], (open_N_Z?), bool, FALSE](fullset[(open_N_Z?)])]"
     inf_prime_topology nil)
    (emptyset_is_clopen name-judgement "clopen
    [int,
     extend[setof[int], (open_N_Z?), bool, FALSE](fullset[(open_N_Z?)])]"
     inf_prime_topology nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (member const-decl "bool" sets nil))
   shostak))
 (N_prime_TCC1 0
  (N_prime_TCC1-1 nil 3925820628 ("" (subtype-tcc) nil nil) nil nil
   (N_prime subtype "inf_prime_topology.p" "posint"))))

